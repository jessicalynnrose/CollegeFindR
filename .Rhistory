x[3,5,7]
x[c(3,5,7)]
x[0]
x[30000]
x[3000]
x[c(-2,-10)]
x[-c(2,10)]
vect <- c(foo=11, bar=2, norf=NA)
vect
names(vect)
vect2 <- c(11,2,NA)
names(vect2) <- c("foo","bar","norf")
?idnetical
?identical()
identical(vect,vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix()
?matrix
my_matrix2 <- matrix(1:20, nrow=4)
identical(my_matrix, my_matrix2)
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients,my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data)
colnames(my_data) <- cnames
my_data
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
?mean()
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
weeklyRgrade
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
weeklyRgrade
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
source('C:/Users/jess/Desktop/Spring 2019/grading.R')
w <- readline()
w
inits <- readline("type your initials: ")
inits
?connection
source('~/.active-rstudio-document')
add2(3,5)
source('~/.active-rstudio-document')
above10(c(1,2,11,12,21,22))
q <- 1:20
source('~/.active-rstudio-document')
above(q,13)
source('~/.active-rstudio-document')
above(q)
above(q,15)
source('~/.active-rstudio-document')
colmeans(airquality)
colmean(airquality)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
colmean(airquality)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
colmean(airquality)
airquality
?featureCounts
install.packages("tidyverse")
source('C:/Users/jess/Desktop/Spring 2019/R Practice/RforDataScienceCh3.R')
ggplot::mpg
ggplot(ggplot::mpg)
ggplot2::mpg
mpg <- ggplot2::mpg
ggplot(data=mpg) + geom_point(mapping = aes(x=displ, y=hwy))
head(mpg)
?mpg
ggplot(data=mpg) + geom_point(mapping = aes(x=hwy, y=cyl))
ggplot(data=mpg) + geom_point(mapping = aes(x=class, y=drv))
ggplot(data=mpg)
nrows(mpg)
nrow(mpg)
ncol(mpg)
pairs(iris[,5], col=iris[,5], pch=19)
pairs(iris[, -5], col = iris[, 5], pch = 19)
irispca <- prcomp(iris[, -5])
summary(irispca)
biplot(irispca)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
install.packages("seqinr")
library("seqinr")
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
turkey_multiple?
j
turkey_multiple
tukey_multiple()
tukey_multiple(57)
melanoma
data()
CO2
week11data <- CO2[,c(1,5,6)]
subset(CO2, select = c(conc,uptake))
week11 <- subset(CO2, select = c(conc,uptake))
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
week11 <- subset(CO2, select = c(conc,uptake))
tukey_multiple(week11)
traceback()
debug(tukey_multiple)
debug(tukey_multiple(week11))
dim(week11)
tukey_multiple(week11)
tukey_multiple(week11)
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
week11
tukey_multiple(week11)
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
outlier?
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
outlier?
l
tukey_multiple(week11)
debug(tukey_multiple(week11))
n
debug(tukey_multiple(week11))
install.packages("outliers")
library("outliers")
?outliers
'??outliers'
??outliers
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
?outliers()
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
tukey_multiple(week11)
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
week11
outlier.vec <- vector(length=nrow(x))
outlier.vec <- vector(length=nrow(9))
x <- week11
outlier.vec <- vector(length=nrow(x))
outlier.vec
outlier(x[i,])
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{
outlier.vec[i] <- all(outlier(x[i,]))
return(outlier.vec)
}
}
week11 <- subset(CO2, select = c(conc,uptake))
tukey_multiple(week11)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && tuning.outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{
outlier.vec[i] <- all(outlier(x[i,]))
return(outlier.vec)
}
}
week11 <- subset(CO2, select = c(conc,uptake))
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
tukey_multiple <- function(x) {
outliers <- array(TRUE,dim=dim(x))
for (j in 1:ncol(x))
{
outliers[,j] <- outliers[,j] && outlier(x[,j])
}
outlier.vec <- vector(length=nrow(x))
for (i in 1:nrow(x))
{
outlier.vec[i] <- all(outlier[i,])
return(outlier.vec)
}
}
tukey_multiple(week11)
source('~/GitHub/Intro_to_R_Spring_2019/week11.R')
tukey_multiple(week11)
closebank()
install.packages("seqinr")
library("seqinr")
library("seqinr")
#retrieving genome sequences with seqinr instead of going to NCBI **must know NCBI accession**
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query2$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
library("seqinr")
#retrieving genome sequences with seqinr instead of going to NCBI **must know NCBI accession**
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(thequery$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
library("seqinr")
#retrieving genome sequences with seqinr instead of going to NCBI **must know NCBI accession**
getncbiseq <- function(accession)
{
require("seqinr") # this function requires the SeqinR R package
# first find which ACNUC database the accession is stored in:
dbs <- c("genbank","refseq","refseqViruses","bacterial")
numdbs <- length(dbs)
for (i in 1:numdbs)
{
db <- dbs[i]
choosebank(db)
# check if the sequence is in ACNUC database 'db':
resquery <- try(query(".tmpquery", paste("AC=", accession)), silent = TRUE)
if (!(inherits(resquery, "try-error")))
{
queryname <- "query2"
thequery <- paste("AC=",accession,sep="")
query(`queryname`,`thequery`)
# see if a sequence was retrieved:
seq <- getSequence(query$req[[1]])
closebank()
return(seq)
}
closebank()
}
print(paste("ERROR: accession",accession,"was not found"))
}
dengueseq <- getncbiseq("NC_001477")
boxplot(runif(100, 0, 1), runif(1000, 2, 3))
a <- 10
b <- 20
c <- a + b
c
a <- c(1,2,5.3,6,-2,4)
b <- c("one", "two", "three")
c <- c(TRUE, TRUE, TRUE, FALSE, FALSE, TRUE)
a
b
c
x <- matrix(1:100, nrow=5, byrow=T)
x
x[,2]
x(,2)
p1 <- c("P1", "P2", "P3")
p2 <- c(1,2,3)
matp <- data.frame(something = p1, otherthing = p2)
matp
matp[,2]
matp$otherthing
mean(matp$otherthing)
matd
matd <- data.frame(something = c("P1", "P2", "P3"), otherthing <- c(4,5,6))
matd <- data.frame(something = c("P1", "P2", "P3"), otherthing = c(4,5,6))
mean(matp$otherthing)
mean(matd$otherthing)
view(matp, matd)
b1 <- c('a', 'b', 'c', 'd')
c1 <- c(a1,b1)
c1
a1 <- c(1,2,3,4)
b1 <- c('a', 'b', 'c', 'd')
c1 <- c(a1,b1)
c1
c1 <- list(a1,b1)
c1
data("mtcars")
mydata <- mtcars
head(mydata)
head(mydata)
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
source('~/.active-rstudio-document')
head(data)
source('~/.active-rstudio-document')
head(data207)
GM_TPM <- data.frame(id = data207$v1, tpm = data207$v14)
K562_TPM <- data.frame(id = data240$v1, tpm = data240$v14)
source('~/.active-rstudio-document')
quantile(c(GM_TPM$tpm, K562_TPM$tpm))
head(GM_TPM)
data207$V1
source('C:/Users/jess/Desktop/Spring2019/grading.R')
#calculates final grade for SB
finalgradeSB <- function(one,two,three,four) {
examone <- one * 0.17
examtwo <- two * 0.26
examthree <- three * 0.26
examfour <- four * 0.21
presentationgrade <- finalpresengrade * .1
finalgrade <<- examone + examtwo + examthree + examfour+ presentationgrade
print(finalgrade)
}
#calculates presentation grade for class
presentgrade <- function(first,second,third,fourth) {
unitonep <- (first*20) * 0.25
unittwop <- (second*20) * 0.25
unitthreep <- (third*20) * 0.25
unitfourp <- (fourth*20) * 0.25
finalpresengrade <<- unitonep + unittwop + unitthreep + unitfourp
return(finalpresengrade)
}
###insert grades here for SB###
presentgrade(5,4.33,4.75,0)
finalgradeSB(90,98,88,85)
#calculates final grade for SB
finalgradeSB <- function(one,two,three,four) {
examone <- one * 0.17
examtwo <- two * 0.26
examthree <- three * 0.26
examfour <- four * 0.21
presentationgrade <- finalpresengrade * .1
finalgrade <<- examone + examtwo + examthree + examfour+ presentationgrade
print(finalgrade)
}
#calculates presentation grade for class
presentgrade <- function(first,second,third,fourth) {
unitonep <- (first*20) * 0.25
unittwop <- (second*20) * 0.25
unitthreep <- (third*20) * 0.25
unitfourp <- (fourth*20) * 0.25
finalpresengrade <<- unitonep + unittwop + unitthreep + unitfourp
return(finalpresengrade)
}
###insert grades here for SB###
presentgrade(5,4.33,4.75,0)
finalgradeSB(90,98,88,85)
#determines qualitative grade based on final grade and grading scale
if (finalgrade > 88) {
print("Final grade for SB is an A!")
} else if (finalgrade >= 79 & finalgrade < 89) {
print("Final grade for SB is a B.")
} else if (finalgrade >= 69 & finalgrade < 79) {
print("Final grade for SB is a C.")
} else if (finalgrade >= 59 & finalgrade < 69) {
print("Final grade for SB is a D.")
} else {
print("Final grade for SB is an F.")
}
####################CALCULATE FINAL CLASS GRADE FOR STRUCTURAL BIOLOGY########
#calculates final grade for SB
finalgradeSB <- function(one,two,three,four) {
examone <- one * 0.17
examtwo <- two * 0.26
examthree <- three * 0.26
examfour <- four * 0.21
presentationgrade <- finalpresengrade * .1
finalgrade <<- examone + examtwo + examthree + examfour+ presentationgrade
print(finalgrade)
}
#calculates presentation grade for class
presentgrade <- function(first,second,third,fourth) {
unitonep <- (first*20) * 0.25
unittwop <- (second*20) * 0.25
unitthreep <- (third*20) * 0.25
unitfourp <- (fourth*20) * 0.25
finalpresengrade <<- unitonep + unittwop + unitthreep + unitfourp
return(finalpresengrade)
}
###insert grades here for SB###
presentgrade(5,4.33,4.75,3)
finalgradeSB(90,98,88,85)
#determines qualitative grade based on final grade and grading scale
if (finalgrade > 88) {
print("Final grade for SB is an A!")
} else if (finalgrade >= 79 & finalgrade < 89) {
print("Final grade for SB is a B.")
} else if (finalgrade >= 69 & finalgrade < 79) {
print("Final grade for SB is a C.")
} else if (finalgrade >= 59 & finalgrade < 69) {
print("Final grade for SB is a D.")
} else {
print("Final grade for SB is an F.")
}
install.packages("phytools")
insalled.packages()
library("ape")
library("phytools")
phytools?
1
?phytools
install.packages("roxygen2")
library("roxygen2")
pwd
setwd("/Users/jess/Documents/GitHub/CollegeFindR")
document()
library("roxygen2")
document()
install.packages("devtools")
library("devtools")
document()
document()
document()
document()
document()
document()
document()
document()
View(scorelist)
document()
document()
